# Terraform Plan
name: 'Terraform Plan'
description: 'Terraform Plan Tasks'
inputs:
  tf-version:  
    description: 'Terraform Version'
    required: true
    default: '1.9.5'
  az_storage_acc:
    description: 'Name of the Azure Storage Account'
    required: true
  az_container_name: 
    description: 'Name of the Azure Storage Container'
    required: true 
  az_resource_group: 
    description: 'Name of the Azure Resource Group hosting the backend storage'
    required: true 
  arm_client_id: 
    description: 'Azure Client ID for service principal'
    required: true 
  arm_client_secret: 
    description: 'Azure Client Secret for service principal'
    required: true 
  arm_subscription_id: 
    description: 'Azure Subscription ID'
    required: true 
  arm_tenant_id: 
    description: 'Azure Tenant ID'
    required: true 
  item-name: 
    description: 'Name of the project item in development'
    required: true 
  working-directory:
    description: 'Directory where the Terraform test files are hosted'
    required: true 
  checkov-skip-check:
    description: 'Checkov Skip Checks'
    required: no
    default: ""

runs:
  using: "composite"
  steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf-version }}
        terraform_wrapper: false

    # Python set up (used for Checkov)
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    ##################################
    # TFLint
    ##################################
    - uses: terraform-linters/setup-tflint@v3
      name: Setup TFLint
      with:
        tflint_version: latest

    - name: Init TFLint
      shell: bash
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      shell: bash
      run: tflint --recursive

    ##################################
    # Terraform
    ##################################
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Initialise
      shell: bash
      run: terraform init -backend-config="storage_account_name=${{ inputs.az_storage_acc }}" -backend-config="container_name=${{ inputs.az_container_name }}" -backend-config="key=azure.tfstate" -backend-config="resource_group_name=${{ inputs.az_resource_group }}" -backend-config="subscription_id=${{ inputs.arm_subscription_id }}" -backend-config="tenant_id=${{ inputs.arm_tenant_id }}" -backend-config="client_id=${{ inputs.arm_client_id }}" -backend-config="client_secret=${{ inputs.arm_client_secret }}"
      working-directory: ${{ inputs.working-directory }}
      env:
        ARM_CLIENT_ID: ${{ inputs.arm_client_id }}
        ARM_CLIENT_SECRET: ${{ inputs.arm_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.arm_subscription_id }}
        ARM_TENANT_ID: ${{ inputs.arm_tenant_id }}

    # Validate
    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform plan -input=false -out=plan.tfplan

    # Create plan summary
    - name: "Create plan summary"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform show -no-color plan.tfplan > /tmp/tf-plan.tfplan

    ##################################
    # Checkov
    ##################################
    # Run Checkov scans
    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ inputs.working-directory }}
        framework: terraform
        quiet: true
        skip_check: ${{ inputs.checkov-skip-check }}
      env:
        GITHUB_OVERRIDE_URL: true  # optional: this can be used to instruct the action to override the global GIT config to inject the PAT to the URL

    # Output plan as artifact
    - name: "Upload Terraform Plan Artifact" 
      uses: actions/upload-artifact@v3
      with:
        name: tf-plan
        path: /tmp/tf-plan.tfplan
        if-no-files-found: error
